#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class Teaching {
    vector<int>vec;
    void hamada(int idx , int msk)
    {
        if(idx==26){vec.push_back(msk); return;}
        if(idx!=0&&idx!=2&&idx!=8&&idx!=('t'-'a')&&idx!=('n'-'a'))hamada(idx+1,(msk | (1 << idx) ) );
        hamada(idx+1,msk);
    }
public:
    int count(vector <string> words, int K)
    {
        int msk=0;
        msk|=(1 << 0); msk|=(1<<2); msk|=(1<<8); msk|=(1<<('t'-'a')); msk|=(1<<('n'-'a'));
        hamada(0,msk);
        vector<int>last;
        for(int i=0;i<vec.size();i++)
        {
            if(__builtin_popcount(vec[i])<=K)last.push_back(vec[i]);
        }
        int c,ans=0;
        for(int i=0;i<last.size();i++)
        {
            c=0;
            for(int j=0;j<words.size();j++)
            {
                //words[j].pop_back(); words[j].pop_back(); words[j].pop_back(); words[j].pop_back();
                //bool visited[26]={0};
                bool br=false;
                for(int z=4;z<=words[j].size()-4;z++)
                {
                    if(!(( 1<<(words[j][z]-'a') )&last[i]) ){br=true;break;}
                    //visited[words[j][z]-'a']=1;
                }
                /*for(int z=0;z<26;z++)
                {
                    if(visited[z]&&!( (1<<z)&last[i] ) ){br=true; break;}
                }*/
                if(!br)c++;
            }
            ans=max(ans,c);
        }
        return ans;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	Teaching *obj;
	int answer;
	obj = new Teaching();
	clock_t startTime = clock();
	answer = obj->count(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;
	int p2;

	{
	// ----- test 0 -----
	string t0[] = {"antalrdsdqdtica", "antamnqwhuptica", "antaacvvztica", "antauncqatica", "antaqyoezwitica", "antagxvfwftica", "antailxtica", "antalpctica", "antasgwiwmtica", "antatkammmvtica", "antaidcldzqtica", "antaslftica", "antayzontica", "antavbfittica", "antaxnqbzwutica", "antaagjqdytica", "antakdnktica", "antaanxakntica", "antawjfhtica", "antayptqmutica", "antahwbatica", "antadjeltica", "antafetica", "antalfddkgztica", "antanunthtica", "antaoyitrtica", "antanmvqhtztica", "antagcotica", "antaphcttica", "antavzkrlpntica"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 22;
	p2 = 23;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"antaxxxxxxxtica","antarctica"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"antabtica","antaxtica","antadtica","antaetica","antaftica","antagtica","antahtica","antajtica","antaktica"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 8;
	p2 = 3;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
