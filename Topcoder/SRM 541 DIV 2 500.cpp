#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


map<pair<int,int> ,bool>visited;
class MagicalGirlLevelTwoDivTwo {
public:
	string isReachable(vector <int> jumpTypes, int x, int y) {
	    int curx,cury;
	    queue<pair<int,int> >q;
	    q.push({0,0});
	    visited[{0,0}]=1;
	    while(q.size())
        {
            curx=q.front().first; cury=q.front().second;
           // cout<<"x = "<<curx<<" y = "<<cury<<endl;
            q.pop();
            if(curx==x&&cury==y)return "YES";
            for(int i=0;i<jumpTypes.size();i++)
            {
                int n=jumpTypes[i];
                int dx[]={n,n,-n,-n,1,-1,1,-1};
                int dy[]={1,-1,1,-1,n,n,-n,-n};
                for(int j=0;j<8;j++)
                {
                    int nxtx=curx+dx[j];
                    int nxty=cury+dy[j];
                    if(nxtx>=-100&&nxtx<=100&&nxty>=-100&&nxty<=100&&!visited[{nxtx,nxty}])
                    {
                        visited[{nxtx,nxty}]=1;
                        q.push({nxtx,nxty});
                    }
                }
            }
        }
        return "NO";

	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, int p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1 << "," << p2;
	cout << "]" << endl;
	MagicalGirlLevelTwoDivTwo *obj;
	string answer;
	obj = new MagicalGirlLevelTwoDivTwo();
	clock_t startTime = clock();
	answer = obj->isReachable(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	int p1;
	int p2;
	string p3;

	{
	// ----- test 0 -----
	int t0[] = {2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	p2 = 4;
	p3 = "YES";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	p2 = 4;
	p3 = "NO";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {1,2,3,4,5,6,7,8,9,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -30;
	p2 = 27;
	p3 = "YES";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {29};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 29;
	p2 = 0;
	p3 = "NO";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
