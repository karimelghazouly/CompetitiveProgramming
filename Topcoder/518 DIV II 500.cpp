#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class LargestSubsequence {
    int n;
    string st;

    string dp[51];
    string comp(string s1,string s2,string s3)
    {
        int ans=-1;
        string arr[3]; arr[0]=s1; arr[1]=s2; arr[2]=s3;
        for(int i=0;i<s1.size()&&i<s2.size();i++)
        {
            if(arr[0][i]<arr[1][i]){ans=1;break;}
            if(arr[0][i]>arr[1][i]){ans=0;break;}
        }
        if(ans==-1&&s1.size()>s2.size())ans=0;
        else if(ans==-1)ans=1;
        bool nochange=1;
        for(int i=0;i<arr[ans].size()&&i<s3.size();i++)
        {
            if(arr[2][i]<arr[ans][i]){nochange=0;break;}
            if(arr[2][i]>arr[ans][i]){nochange=0;ans=2; break;}
        }
        if(nochange&&arr[ans].size()<s3.size())ans=2;
        return arr[ans];
    }
    string solve(int idx)
    {
        if(idx==n)return "";
        if(dp[idx]!="-1")return dp[idx];
        string ret,c1,c2;
        ret=solve(idx+1);
        c1=st[idx];
        c2=st[idx]+ret;
        string last=comp(ret,c1,c2);
        //cout<<"idx = "<<idx<<" last = "<<last<<" ret = "<<ret<<" c1 = "<<c1<<" c2 = "<<c2<<endl;
        return last;
    }
public:
	string getLargest(string s) {
	    for(int i=0;i<51;i++)dp[i]="-1";
        n=s.size();
        st=s;
        return solve(0);
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	LargestSubsequence *obj;
	string answer;
	obj = new LargestSubsequence();
	clock_t startTime = clock();
	answer = obj->getLargest(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	string p1;

	{
	// ----- test 0 -----
	p0 = "test";
	p1 = "tt";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "a";
	p1 = "a";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "example";
	p1 = "xple";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "aquickbrownfoxjumpsoverthelazydog";
	p1 = "zyog";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
