#include <vector>

#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class MathContest {
public:
	int countBlack(string ballSequence, int repetitions) {
        bool inv=false;
        int cnt=0;
        stack<char>st;
	    for(int i=ballSequence*size;i<ballSequence.size()*repetitions;i++)st.push(ballSequence[i%(ballSequence.size())]);
        while(st.size())
        {
            char x=st.top(); st.pop();
            cout<<"X = "<<x<<" inv = "<<inv<<endl;
            if((x=='B'&&!inv)||(x=='W'&&inv))
            {
                inv=1-inv;
                cnt++;
            }
            else
            {
                cout<<"white"<<endl;
                stack<char>st2;
                while(st.size())
                {
                    st2.push(st.top());
                    st.pop();
                }
                while(st2.size())
                {
                    st.push(st2.top());
                    st2.pop();
                }
            }
        }
        return cnt;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1;
	cout << "]" << endl;
	MathContest *obj;
	int answer;
	obj = new MathContest();
	clock_t startTime = clock();
	answer = obj->countBlack(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	int p1;
	int p2;

	{
	// ----- test 0 -----
	p0 = "BBWWB";
	p1 = 1;
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "BBB";
	p1 = 10;
	p2 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "BW";
	p1 = 10;
	p2 = 20;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "WWWWWWWBWWWWWWWWWWWWWW";
	p1 = 1;
	p2 = 2;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
