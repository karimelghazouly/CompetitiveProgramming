#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

bool notprime[1000009];
vector<int>vec;
int m;
map<pair<int,int> ,int>mapp;
int solve(int s,int e)
{
    //cout<<"s = "<<s<<" e = "<<e<<endl;
    if(s==e)return 0;
    if(mapp.find({s,e})!=mapp.end())return mapp[{s,e}];
    int l,r,d,sz,news,newe,ret=1e9;
    l=m-s; r=(e-m)+1;
    for(int i=vec.size()-1;i>=0;i--)
    {
        if((e-s+1)%vec[i]==0)
        {
            sz=(e-s+1)/vec[i];
            d=(m-1)/sz; news=(d*sz)+1; newe=(d+1)*sz;
            //cout<<"vec[i] = "<<vec[i]<<" sz =  " <<sz<<" d = "<<d<<endl;
            ret=min(ret,1+solve(news,newe));
        }
    }
    return mapp[{s,e}]=min(l,min(r,ret));
    //cout<<" s = "<<s<<" e = "<<e<<" l = "<<l<<" r = "<<r<<" ret = "<<ret<<endl;
    return ret;
}
class DivideAndShift {
public:
	int getLeast(int N, int M)
	{
	    int x; m=M;
        for(int i=2;i<=1e6;i++)
        {
            if(!notprime[i])
            {
                x=i*2; vec.push_back(i);
                while(x<=1e6)
                {
                    notprime[x]=1;
                    x+=i;
                }
            }
        }
        return solve(1,N);
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	DivideAndShift *obj;
	int answer;
	obj = new DivideAndShift();
	clock_t startTime = clock();
	answer = obj->getLeast(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;

	{
	// ----- test 0 -----
	p0 = 56;
	p1 = 14;
	p2 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 49;
	p1 = 5;
	p2 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 256;
	p1 = 7;
	p2 = 6;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 6;
	p1 = 1;
	p2 = 0;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = 77777;
	p1 = 11111;
	p2 = 2;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
